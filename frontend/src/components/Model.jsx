/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public\models\poddy_m1_stylized_floating_robot_posed.glb 
*/

import React, { useEffect, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations, Html } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useCompute } from "../lib/useCompute";
import * as THREE from "three";
import TypingTextOnce from "./TypingTextOnce";

export function Model(props) {
  const group = React.useRef();
  const { scene, animations } = useGLTF(
    "/models/poddy_m1_stylized_floating_robot_posed.glb"
  );
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState("pose 1 - presentation");
  const { isTranslating, isRecording, asrOutput, translateOutput } =
    useCompute();
  // console.log(actions);
  const [isReady, setIsReady] = useState(false);

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  useEffect(() => {
    const timeout = setTimeout(() => {
      setIsReady(true);
      const ran = getRandomInt(1, 3);
      // console.log(ran);
      if (ran == 1) {
        setAnimation("pose 3 - hello");
      } else {
        setAnimation("pose 4 - warm welcome");
      }
    }, 100);
    return () => clearTimeout(timeout);
  }, []);

  useEffect(() => {
    if (!isReady) return;

    const action = actions[animation];
    if (action) {
      action.reset().fadeIn(1).play();
      action.setLoop(THREE.LoopOnce, 1); // Only play once
      action.clampWhenFinished = true;

      const onFinished = () => {
        // console.log("Animation finished:", animation);
        setTimeout(() => {
          setAnimation(null);
        }, 1000);
      };

      mixer.addEventListener("finished", onFinished);

      return () => {
        mixer.removeEventListener("finished", onFinished);
        action.fadeOut(0.5);
      };
    }
  }, [animation, actions, mixer, isReady]);

  useEffect(() => {
    // console.log(isTranslating);
    if (isRecording) {
      const random = getRandomInt(1, 3);
      if (random === 1) {
        setAnimation("pose 2 - omfg");
      } else if (random == 2) {
        setAnimation("pose 5 - sit sad");
      } else {
        setAnimation("pose 6 - presentation flipped");
      }
    }
  }, [isRecording]);
  useEffect(() => {
    const interval = setInterval(() => {
      if (!isRecording) {
        const random = getRandomInt(1, 3);
        if (random === 1) {
          setAnimation("pose 2 - omfg");
        } else if (random === 2) {
          setAnimation("pose 5 - sit sad");
        } else {
          setAnimation("pose 6 - presentation flipped");
        }
      }
    }, 5000);

    return () => clearInterval(interval); // Cleanup on unmount
  }, [isRecording]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="180829753ca6423c8c1da30a00318372fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.07}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group name="Poddy_Geo01">
                  <group name="body01" />
                  <group name="details01" />
                  <group name="screen01" />
                  <group name="lights01" />
                </group>
                <group name="Master_ctrl01">
                  <group name="root_g_ctrl_a01">
                    <group name="root_ctrl_a01">
                      <group name="root_g_ctrl_b01">
                        <group name="root_ctrl_b01" position={[0, 21, 0]}>
                          <group name="head_g_ctrl01" position={[0, -21, 0]}>
                            <group name="head_ctrl01" position={[0, 26.049, 0]}>
                              <Html position={[-1, -20, 6]}>
                                {isTranslating == false ? (
                                  <div
                                    className={`absolute left-1/2 transform -translate-x-1/2 bg-black/60 backdrop-blur-md text-white p-4 rounded-xl w-[80vw] max-w-md text-sm max-md:text-xs
                                    ${
                                      asrOutput && translateOutput
                                        ? "block"
                                        : "hidden"
                                    }
                                    `}
                                  >
                                    <p className="p-2 font-bold">
                                      User :<br />
                                      <TypingTextOnce
                                        text={asrOutput}
                                        loop={false}
                                      />
                                    </p>
                                    <p className="p-2 font-bold">
                                      Translation:
                                      <br />{" "}
                                      <TypingTextOnce
                                        text={translateOutput}
                                        loop={false}
                                      />
                                    </p>
                                  </div>
                                ) : (
                                  <p
                                    className={`absolute left-1/2 text-center transform -translate-x-1/2 bg-black/60 backdrop-blur-md text-white p-4 rounded-xl w-[80vw] max-w-md text-sm max-md:text-xs`}
                                  >
                                    {isRecording ? (
                                      <TypingTextOnce
                                        key="recording"
                                        text={"Okey..."}
                                        loop={true}
                                      />
                                    ) : (
                                      <TypingTextOnce
                                        key="idle"
                                        text="Hmm...."
                                        loop={true}
                                        speed={180}
                                      />
                                    )}
                                  </p>
                                )}
                              </Html>
                              <group
                                name="eye_l_g_ctrl01"
                                position={[0, -26.049, 0]}
                              >
                                <group
                                  name="eye_l_ctrl01"
                                  position={[3.229, 35.986, 6.266]}
                                />
                              </group>
                              <group
                                name="eye_r_g_ctrl01"
                                position={[0, -26.049, 0]}
                              >
                                <group
                                  name="eye_r_ctrl01"
                                  position={[-3.229, 35.986, 6.266]}
                                />
                              </group>
                              <group
                                name="antenna_l_g_ctrl01"
                                position={[0, -26.049, 0]}
                              >
                                <group
                                  name="antenna_l_ctrl01"
                                  position={[9.125, 34.916, -1.479]}
                                />
                              </group>
                              <group
                                name="antenna_r_g_ctrl01"
                                position={[0, -26.049, 0]}
                              >
                                <group
                                  name="antenna_r_ctrl01"
                                  position={[-9.125, 34.916, -1.479]}
                                />
                              </group>
                            </group>
                          </group>
                          <group name="arm_l_g_ctrl01" position={[0, -21, 0]}>
                            <group
                              name="arm_l_ctrl01"
                              position={[8.357, 21.596, 0]}
                            />
                          </group>
                          <group name="arm_r_g_ctrl01" position={[0, -21, 0]}>
                            <group
                              name="arm_r_ctrl01"
                              position={[-8.357, 21.596, 0]}
                            />
                          </group>
                        </group>
                      </group>
                    </group>
                  </group>
                  <group name="joints01">
                    <group name="Object_29">
                      <group name="root_a01_00" rotation={[0, 0, Math.PI / 2]}>
                        <primitive object={nodes.root_b01_01} />
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
          <skinnedMesh
            name="Object_30"
            geometry={nodes.Object_30.geometry}
            material={materials.body}
            skeleton={nodes.Object_30.skeleton}
          />
          <skinnedMesh
            name="Object_31"
            geometry={nodes.Object_31.geometry}
            material={materials.body}
            skeleton={nodes.Object_31.skeleton}
          />
          <skinnedMesh
            name="Object_32"
            geometry={nodes.Object_32.geometry}
            material={materials.screen}
            skeleton={nodes.Object_32.skeleton}
          />
          <skinnedMesh
            name="Object_33"
            geometry={nodes.Object_33.geometry}
            material={materials.body}
            skeleton={nodes.Object_33.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/model/poddy_m1_stylized_floating_robot_posed.glb");
